{"remainingRequest":"C:\\Users\\Admin\\client-form\\client-form\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Admin\\client-form\\client-form\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Admin\\client-form\\client-form\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Admin\\client-form\\client-form\\src\\components\\clientForm.vue?vue&type=template&id=15aeb5bf&scoped=true&","dependencies":[{"path":"C:\\Users\\Admin\\client-form\\client-form\\src\\components\\clientForm.vue","mtime":1596292893785},{"path":"C:\\Users\\Admin\\client-form\\client-form\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\client-form\\client-form\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\client-form\\client-form\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\client-form\\client-form\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}